{"version":3,"sources":["Nav.js","About.js","Posts.js","Blogs.js","Post.js","Photo.js","UserProfile.js","FullImage.js","HomePage.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyles","navStyle","width","height","backgroundColor","color","overflow","display","alignItems","justifyContent","textDecoration","navLinks","fontSize","fontWeight","listStyle","cursor","style","to","About","className","Posts","userId","title","id","postStyle","post","margin","textAlign","marginBottom","padding","fontStyle","Blogs","useState","posts","getPosts","useEffect","takeItems","a","fetch","res","json","data","customPosts","filter","map","key","Post","match","postDetail","getPostDetails","getItemDetail","params","body","href","rel","target","Photo","thamburl","url","src","alt","UserProfile","photos","getPhotos","takePhotos","photo","thumbnailUrl","FullImage","fullImages","getFullImages","abc","AbortController","sig","signal","then","abort","HomePage","App","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.838a954a.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n  const navStyles = {\r\n    navStyle: {\r\n      width: '100%',\r\n      height: '7rem',\r\n      backgroundColor: '#888',\r\n      color: 'fff',\r\n      overflow: 'hidden',\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'space-around'\r\n    },\r\n    color: {\r\n      color: '#fff',\r\n      textDecoration: 'none'\r\n    },\r\n    navLinks: {\r\n      display: 'flex',\r\n      width: '40%',\r\n      fontSize: '1.5rem',\r\n      fontWeight: '500',\r\n      justifyContent: 'space-between',\r\n      listStyle: 'none',\r\n      cursor: 'pointer'\r\n    }\r\n  };\r\n  return (\r\n    <nav style={navStyles.navStyle}>\r\n      <h1 style={navStyles.color}>logo</h1>\r\n      <ul style={navStyles.navLinks}>\r\n        <Link style={navStyles.color} to=\"/\">\r\n          <li>Home</li>\r\n        </Link>\r\n        <Link style={navStyles.color} to=\"/about\">\r\n          <li>About</li>\r\n        </Link>\r\n        <Link style={navStyles.color} to=\"/blogs\">\r\n          <li>Blogs</li>\r\n        </Link>\r\n        <Link style={navStyles.color} to=\"/profiles\">\r\n          <li>Profiles</li>\r\n        </Link>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"about\">\r\n      <h1>from about</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Posts = ({ userId, title, id }) => {\r\n  const postStyle = {\r\n    post: {\r\n      width: '80%',\r\n      margin: '0 auto',\r\n      backgroundColor: '#fff',\r\n      textAlign: 'center',\r\n      marginBottom: '3rem',\r\n      padding: '1rem'\r\n    },\r\n    fontStyle: {\r\n      textDecoration: 'none'\r\n    }\r\n  };\r\n  return (\r\n    <div style={postStyle.post}>\r\n      <h4> User Id : {userId}</h4>\r\n      <h4>\r\n        <Link style={postStyle.fontStyle} to={`/blogs/${id}`}>\r\n          {' '}\r\n          Post Title: {title}\r\n        </Link>\r\n      </h4>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Posts from './Posts';\r\nfunction Blogs() {\r\n  const [posts, getPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    takeItems();\r\n  }, []);\r\n  const takeItems = async () => {\r\n    const res = await fetch('https://jsonplaceholder.typicode.com/posts');\r\n    const data = await res.json();\r\n    // console.log(data);\r\n    getPosts(data);\r\n  };\r\n\r\n  const blogStyles = {\r\n    head: {\r\n      textAlign: 'center'\r\n    }\r\n  };\r\n\r\n  const customPosts = posts.filter(post => post.id > 49);\r\n\r\n  return (\r\n    <div className=\"blogs\">\r\n      <h1 style={blogStyles.head}>from Blogs</h1>\r\n      {customPosts.map(post => (\r\n        <Posts\r\n          key={post.id}\r\n          id={post.id}\r\n          userId={post.userId}\r\n          title={post.title}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Blogs;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst Post = ({ match }) => {\r\n  const [postDetail, getPostDetails] = useState({});\r\n\r\n  useEffect(() => {\r\n    getItemDetail();\r\n  }, []);\r\n\r\n  const getItemDetail = async () => {\r\n    const res = await fetch(\r\n      `https://jsonplaceholder.typicode.com/posts/${match.params.id}`\r\n    );\r\n    const data = await res.json();\r\n    getPostDetails(data);\r\n  };\r\n\r\n  const postStyles = {\r\n    wrapper: {\r\n      backgroundColor: '#466698',\r\n      color: '#fff',\r\n      padding: '2rem',\r\n      width: '80%',\r\n      margin: '5rem auto'\r\n    }\r\n  };\r\n\r\n  if (postDetail === {}) {\r\n    return <p>Loading postDetail...</p>;\r\n  }\r\n\r\n  return (\r\n    <div style={postStyles.wrapper}>\r\n      <p>\r\n        <b>User Id </b>: {postDetail.id}\r\n      </p>\r\n      <p>\r\n        <b>Post Body </b>: {postDetail.body}\r\n      </p>\r\n      <b> for confirmation: </b>\r\n      <a\r\n        href=\"https://jsonplaceholder.typicode.com/posts\"\r\n        rel=\"noopener noreferrer\"\r\n        target=\"_blank\"\r\n      >\r\n        click me\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Photo = ({ title, thamburl, id, url }) => {\r\n  const PhotoStyles = {\r\n    center: {\r\n      width: '50%',\r\n      margin: '3rem auto 0 auto'\r\n    }\r\n  };\r\n  return (\r\n    <div style={PhotoStyles.center}>\r\n      <h2>Title: {title}</h2>\r\n      <h6>Id: {id}</h6>\r\n      <Link to={`/profiles/${id}`}>\r\n        {' '}\r\n        <img src={thamburl} alt={title} />{' '}\r\n      </Link>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Photo;\r\n","import React, { useState, useEffect } from 'react';\r\nimport Photo from './Photo';\r\nconst UserProfile = () => {\r\n  const [photos, getPhotos] = useState([]);\r\n\r\n  useEffect(() => {\r\n    takePhotos();\r\n  }, []);\r\n\r\n  const takePhotos = async () => {\r\n    const res = await fetch(\r\n      'https://jsonplaceholder.typicode.com/photos?albumId=1'\r\n    );\r\n    const data = await res.json();\r\n    getPhotos(data);\r\n  };\r\n\r\n  if (photos === null) {\r\n    return <p>Loading profile...</p>;\r\n  }\r\n  return (\r\n    <div>\r\n      {photos.map(photo => (\r\n        <Photo\r\n          key={photo.id}\r\n          id={photo.id}\r\n          thamburl={photo.thumbnailUrl}\r\n          title={photo.title}\r\n          url={photo.url}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserProfile;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst FullImage = ({ match }) => {\r\n  const [fullImages, getFullImages] = useState({});\r\n\r\n  useEffect(() => {\r\n    const abc = new AbortController();\r\n    const sig = abc.signal;\r\n\r\n    fetch(`https://jsonplaceholder.typicode.com/photos/${match.params.id}`, {\r\n      signal: sig\r\n    })\r\n      .then(res => res.json())\r\n      .then(data => getFullImages(data));\r\n\r\n    return function cleanup() {\r\n      abc.abort();\r\n    };\r\n  }, []);\r\n\r\n  // const takeImages = async () => {\r\n  //   const res = await fetch(\r\n  //     `https://jsonplaceholder.typicode.com/photos/${match.params.id}`\r\n  //   );\r\n  //   const data = await res.json();\r\n  //   getFullImages(data);\r\n  // };\r\n\r\n  const fullImagesStyles = {\r\n    center: {\r\n      textAlign: 'center',\r\n      margin: '1rem 0 0 0'\r\n    }\r\n  };\r\n\r\n  if (fullImages === {}) {\r\n    return 'image is loading...';\r\n  }\r\n  return (\r\n    <div style={fullImagesStyles.center}>\r\n      <img src={fullImages.url} alt={fullImages.title} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullImage;\r\n","import React from 'react';\r\n\r\nconst HomePage = () => {\r\n  return (\r\n    <div>\r\n      <h1>Welcome to Home Page</h1>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default HomePage;\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Nav';\nimport About from './About';\nimport Blogs from './Blogs';\nimport Post from './Post';\nimport UserProfile from './UserProfile';\nimport FullImage from './FullImage';\nimport HomePage from './HomePage';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nfunction App() {\n  return (\n    <Router>\n      <div className=\"app\">\n        <Nav />\n        <Switch>\n          <Route path=\"/\" exact component={HomePage} />\n          <Route path=\"/about\" component={About} />\n          <Route path=\"/blogs\" exact component={Blogs} />\n          <Route path=\"/profiles\" exact component={UserProfile} />\n          <Route path=\"/profiles/:id\" component={FullImage} />\n          <Route path=\"/blogs/:id\" component={Post} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}